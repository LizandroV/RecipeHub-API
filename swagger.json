{
  "openapi": "3.0.0",
  "info": {
    "title": "RecipeHub API",
    "description": "API for managing users and recipes in RecipeHub.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://recipehub-api-jxvk.onrender.com",
      "description": "Production Server"
    },
    {
      "url": "http://localhost:8080",
      "description": "Development Server"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Operations related to user accounts"
    },
    {
      "name": "Recipes",
      "description": "Operations related to managing recipes"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a new user",
        "description": "",
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "409": {
            "description": "The user already exists"
          },
          "500": {
            "description": "Server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "john"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "SecurePass123"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login an existing user",
        "description": "",
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "example": {
                  "msg": "Login Successful",
                  "token": "eyJhbGciOi..."
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "SecurePass123"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user profile data",
        "description": "",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user profile",
        "description": "",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Invalid password format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "john"
                  },
                  "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "SecurePass123"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user profile",
        "description": "",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/recipes/": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get all recipes",
        "description": "Retrieves the complete collection of delicious recipes from the archives.",
        "responses": {
          "200": {
            "description": "List of all recipes retrieved successfully"
          },
          "500": {
            "description": "Server error while fetching recipes"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create a new recipe",
        "description": "Crafts a brand new recipe with the given data.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Recipe created successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while creating the recipe"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Spaghetti Bolognese"
                  },
                  "ingredients": {
                    "type": "string",
                    "example": "Spaghetti, minced meat, tomato sauce, onion, garlic"
                  },
                  "instructions": {
                    "type": "string",
                    "example": "Cook spaghetti. Brown meat. Add sauce. Mix and serve."
                  },
                  "category": {
                    "type": "string",
                    "example": "660ff010f25b7f9f94f42c2a"
                  },
                  "author": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "time": {
                    "type": "string",
                    "example": "45 minutes"
                  },
                  "difficulty": {
                    "type": "string",
                    "example": "Medium"
                  }
                },
                "required": [
                  "title",
                  "ingredients",
                  "instructions",
                  "category",
                  "author",
                  "time",
                  "difficulty"
                ]
              }
            }
          }
        }
      }
    },
    "/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get a single recipe by ID",
        "description": "Fetches the details of a single recipe, chosen by its ID â€” a culinary gem.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the recipe to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe retrieved successfully"
          },
          "500": {
            "description": "Server error while retrieving the recipe"
          }
        }
      },
      "put": {
        "tags": [
          "Recipes"
        ],
        "summary": "Update a recipe by ID",
        "description": "Finds a recipe by ID and   it with the provided data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the recipe to update"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while updating the recipe"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Spaghetti Bolognese"
                  },
                  "ingredients": {
                    "type": "string",
                    "example": "Spaghetti, minced meat, tomato sauce, onion, garlic"
                  },
                  "instructions": {
                    "type": "string",
                    "example": "Cook spaghetti. Brown meat. Add sauce. Mix and serve."
                  },
                  "category": {
                    "type": "string",
                    "example": "660ff010f25b7f9f94f42c2a"
                  },
                  "author": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "time": {
                    "type": "string",
                    "example": "45 minutes"
                  },
                  "difficulty": {
                    "type": "string",
                    "example": "Medium"
                  }
                },
                "required": [
                  "title",
                  "ingredients",
                  "instructions",
                  "category",
                  "author",
                  "time",
                  "difficulty"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Delete a recipe by ID",
        "description": "Removes a recipe entirely from the collection, using its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the recipe to delete"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe deleted successfully (no content)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while deleting the recipe"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/categories/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "description": "Retrieves the list of all culinary categories known to your kitchen.",
        "responses": {
          "200": {
            "description": "List of all categories retrieved successfully"
          },
          "500": {
            "description": "Server error while fetching categories"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category",
        "description": "Adds a new category to the cookbook archive â€” a new culinary family is born.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while creating the category"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Desserts"
                  },
                  "description": {
                    "type": "string",
                    "example": "Sweet and sugary treats to end your meal."
                  }
                },
                "required": [
                  "name",
                  "description"
                ]
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get a single category by ID",
        "description": "Fetches the noble lineage of a single category by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the category to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully"
          },
          "500": {
            "description": "Server error while retrieving the category"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update a category by ID",
        "description": "Refines a category â€” trims its name or rewrites its story.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the category to update"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while updating the category"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Appetizers"
                  },
                  "description": {
                    "type": "string",
                    "example": "Small dishes to whet the appetite."
                  }
                },
                "required": [
                  "name",
                  "description"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete a category by ID",
        "description": "Erases a category from the scrolls â€” use with care.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the category to delete"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted successfully (no content)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while deleting the category"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/comments/recipe/{recipeId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get all comments for a recipe",
        "description": "Retrieves all praises and critiques left by users for a specific recipe.",
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the recipe to fetch comments for"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments retrieved successfully"
          },
          "500": {
            "description": "Server error while retrieving comments"
          }
        }
      }
    },
    "/comments/": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create a new comment on a recipe",
        "description": "A user pens down their thoughts on a recipe, leaving stars and words of wisdom.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipe": {
                    "type": "string",
                    "example": "64401f92d4a23108b1cd32f5"
                  },
                  "comment": {
                    "type": "string",
                    "example": "Wow, that flavor burst!"
                  },
                  "stared": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "example": 4
                  }
                },
                "required": [
                  "recipe",
                  "comment",
                  "stared"
                ]
              }
            }
          }
        }
      }
    },
    "/comments/{id}": {
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete a comment by ID",
        "description": "Removes a comment from the annals of culinary discourse.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the comment to delete"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Comment deleted successfully (no content)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while deleting the comment"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "object"
          },
          "properties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "email": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "password": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "favorites": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "array"
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "required": {
            "type": "array",
            "example": [
              "name",
              "email",
              "password"
            ],
            "items": {
              "type": "string"
            }
          },
          "example": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Jane Doe"
              },
              "email": {
                "type": "string",
                "example": "jane@example.com"
              },
              "password": {
                "type": "string",
                "example": "StrongPassword123"
              },
              "favorites": {
                "type": "array",
                "example": [
                  "recipe123",
                  "recipe456"
                ],
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Recipe": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "object"
          },
          "properties": {
            "type": "object",
            "properties": {
              "title": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "ingredients": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "instructions": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "category": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  },
                  "description": {
                    "type": "string",
                    "example": "ID from Categories Collection"
                  }
                }
              },
              "author": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "time": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "difficulty": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  },
                  "enum": {
                    "type": "array",
                    "example": [
                      "Easy",
                      "Medium",
                      "Hard"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": {
            "type": "array",
            "example": [
              "title",
              "ingredients",
              "instructions",
              "category",
              "author",
              "time",
              "difficulty"
            ],
            "items": {
              "type": "string"
            }
          },
          "example": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "Spaghetti Carbonara"
              },
              "ingredients": {
                "type": "string",
                "example": "eggs, bacon, parmesan, pasta"
              },
              "instructions": {
                "type": "string",
                "example": "Boil pasta. Fry bacon. Mix everything with parmesan and eggs."
              },
              "category": {
                "type": "string",
                "example": "6613b68f7399f5b4c59cbced"
              },
              "author": {
                "type": "string",
                "example": "Mario Ross"
              },
              "time": {
                "type": "string",
                "example": "30 minutes"
              },
              "difficulty": {
                "type": "string",
                "example": "Medium"
              }
            }
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "object"
          },
          "properties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "description": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          },
          "required": {
            "type": "array",
            "example": [
              "name"
            ],
            "items": {
              "type": "string"
            }
          },
          "example": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Soups"
              },
              "description": {
                "type": "string",
                "example": "Warm and hearty broths for all seasons."
              }
            }
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "object"
          },
          "properties": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "recipe": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "comment": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "string"
                  }
                }
              },
              "stared": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "integer"
                  },
                  "minimum": {
                    "type": "number",
                    "example": 1
                  },
                  "maximum": {
                    "type": "number",
                    "example": 5
                  }
                }
              }
            }
          },
          "required": {
            "type": "array",
            "example": [
              "user",
              "recipe",
              "comment",
              "stared"
            ],
            "items": {
              "type": "string"
            }
          },
          "example": {
            "type": "object",
            "properties": {
              "user": {
                "type": "string",
                "example": "67f4aed8ba92c740e7a0e6ab"
              },
              "recipe": {
                "type": "string",
                "example": "6613b68f7399f5b4c59cbced"
              },
              "comment": {
                "type": "string",
                "example": "Delicious and easy to make!"
              },
              "stared": {
                "type": "number",
                "example": 5
              }
            }
          }
        }
      }
    },
    "parameters": {
      "recipeId": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "ID of the recipe",
        "example": "60d0fe4f5311236168a109ca"
      }
    }
  }
}